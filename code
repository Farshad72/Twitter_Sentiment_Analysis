############## Import required packages
!pip install -q transformers
!pip install -q datasets
import os
import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from transformers import BertTokenizer, BertModel, AdamW, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pandas as pd
from datasets import load_dataset, Dataset

############## Import dataset from huggingface 
sentiment_dataset = load_dataset("tweet_eval", "sentiment", split="train[:20%]")
train_set = Dataset.from_file("/content/drive/MyDrive/Twitter-sentiment-analysis/train_data.arrow")
test_set = Dataset.from_file("/content/drive/MyDrive/Twitter-sentiment-analysis/test_data.arrow")
val_set = Dataset.from_file("/content/drive/MyDrive/Twitter-sentiment-analysis/val_data.arrow")

############## Define classification for text encoding
class TextClassificationDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_length):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length
    def __len__(self):
        return len(self.texts)
    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]
        encoding = self.tokenizer(text, return_tensors='pt', max_length=self.max_length, padding='max_length', truncation=True)
        return {'input_ids': encoding['input_ids'].flatten(), 'attention_mask': encoding['attention_mask'].flatten(), 'label': torch.tensor(label)}
  
############## Add classification layer on top of the Bert based model with number of classes 
class BERTClassifier(nn.Module):
    def __init__(self, bert_model_name, num_classes):
        super(BERTClassifier, self).__init__()
        self.bert = BertModel.from_pretrained(bert_model_name)
        self.dropout = nn.Dropout(0.1)
        self.fc = nn.Linear(self.bert.config.hidden_size, num_classes)
    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.pooler_output
        x = self.dropout(pooled_output)
        logits = self.fc(x)
        return logits
  
############## Define training functino to update the model weights. Alternatively, you can use huggingface trainer function if you do not want granual control for finetuning
  def train(model, data_loader, optimizer, scheduler, device):
    model.train()
    for batch in data_loader:
        optimizer.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['label'].to(device)
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        loss = nn.CrossEntropyLoss()(outputs, labels)
        loss.backward()
        optimizer.step()
        scheduler.step()
  
  ############## define evaluation function to turn of the weight updating and compute the evaluation metrics for trainign and validation sets
  def evaluate(model, data_loader, device):
    model.eval()
    predictions = []
    actual_labels = []
    with torch.no_grad():
        for batch in data_loader:
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['label'].to(device)
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)
            predictions.extend(preds.to(device).tolist())
            actual_labels.extend(labels.to(device).tolist())
    return accuracy_score(actual_labels, predictions), classification_report(actual_labels, predictions)
  
############## define a function to predict sentiment of an unseen text 
  def predict_sentiment(text, model, tokenizer, device, max_length=128):
    model.eval()
    encoding = tokenizer(text, return_tensors='pt', max_length=max_length, padding='max_length', truncation=True)
    input_ids = encoding['input_ids'].to(device)
    attention_mask = encoding['attention_mask'].to(device)

    with torch.no_grad():
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        _, preds = torch.max(outputs, dim=1)
    return preds.item()

############## Set up hyperparameters
bert_model_name = 'bert-base-uncased'
num_classes = 3
max_length = 128
batch_size = 64
num_epochs = 5
learning_rate = 2e-5

############## upload the training, test and validation sets to dataloader to batching and training the model
tokenizer = BertTokenizer.from_pretrained(bert_model_name)
train_dataset = TextClassificationDataset(train_set['text'], train_set['label'], tokenizer, max_length)
val_dataset = TextClassificationDataset(val_set['text'], val_set['label'], tokenizer, max_length)
train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_dataloader = DataLoader(val_dataset, batch_size=batch_size)

############## set the device to GPU if avalable and set the model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = BERTClassifier(bert_model_name, num_classes).to(device)

############## set optimizer as AdamW (suitable for text classification and set scheduler as linear schelurer with warm up steps
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
total_steps = len(train_dataloader) * num_epochs
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0.1*total_steps, num_training_steps=total_steps)

############## train the model and print the training and validation loss 
for epoch in range(num_epochs):
        print(f"Epoch {epoch + 1}/{num_epochs}")
        train(model, train_dataloader, optimizer, scheduler, device)
        val_loss = 0.0
        train_loss = 0.0
        with torch.no_grad():
            for batch in val_dataloader:
              input_ids = batch['input_ids'].to(device)
              attention_mask = batch['attention_mask'].to(device)
              labels = batch['label'].to(device)
              outputs = model(input_ids=input_ids, attention_mask=attention_mask)
              loss = nn.CrossEntropyLoss()(outputs, labels)
              val_loss += loss.item()
            for batch in train_dataloader:
              input_ids = batch['input_ids'].to(device)
              attention_mask = batch['attention_mask'].to(device)
              labels = batch['label'].to(device)
              outputs = model(input_ids=input_ids, attention_mask=attention_mask)
              loss = nn.CrossEntropyLoss()(outputs, labels)
              train_loss += loss.item()
        train_loss /= len(train_dataloader)
        val_loss /= len(val_dataloader)
        print(f"Training Loss: {train_loss:.4f}")  # Print validation loss
        print(f"Validation Loss: {val_loss:.4f}")  # Print validation loss
        accuracy, report = evaluate(model, val_dataloader, device)
        print(f"Validation Accuracy: {accuracy:.4f}")
        print(report)

############## Check the model perfrmance on the test set  
test_dataset = TextClassificationDataset(test_set['text'], test_set['label'], tokenizer, max_length)
num_row = test_set.num_rows
test_dataloader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
evaluate(model, test_dataloader, device)
